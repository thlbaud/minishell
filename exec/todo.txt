

changement par ligne :

-main -> check !line apres readline et tout free si c'est le cas et exit
      -> init line = NULL;
      -> ft_sectclear a la fin et attention au pid a le mettre a nul a chaque fois pour check si y a besoin de le free *{check si c est ok stp j ai pas compris}

                                                                                 !!!!!!!!!!!!
- pars_init l 67, check si line[0] est null *{autant le faire direct dans looper nan ?} nan autant que dans le parcing je test tout et su ligne ne confient pas, je r'envoie args->head = NULL au moins on a que ca a check
                                                                                   !!!!!!!!!!
||  24/04 || -- alan

-̶j̶'̶a̶i̶ c̶h̶a̶n̶g̶e̶ l̶e̶ m̶a̶i̶n̶ p̶s̶k̶ i̶l̶ e̶t̶a̶i̶t̶ t̶r̶o̶p̶ c̶h̶a̶r̶g̶e̶,̶ o̶n̶ a̶ l̶a̶ f̶o̶n̶c̶t̶i̶o̶n̶ p̶r̶o̶m̶p̶t̶ m̶t̶n̶ q̶u̶i̶ f̶a̶i̶t̶ t̶o̶u̶t̶ c̶e̶ q̶u̶'̶i̶l̶ f̶a̶u̶t̶.̶
-> si line nulle (ctrl-d) ca exit, si line[0] au parsing je fais args->head = NULL, du coup je return, et dans prompt si line[0] = 0 j'ajoute pas a l'history

-̶ s̶i̶g̶n̶a̶l̶s̶.̶c̶ -̶>̶ c̶o̶p̶y̶ c̶o̶l̶l̶e̶ l̶e̶ f̶i̶c̶h̶i̶e̶r̶,̶ j̶'̶a̶i̶ c̶h̶a̶n̶g̶e̶ u̶n̶ p̶t̶i̶ t̶r̶u̶c̶,̶ s̶t̶r̶u̶c̶t̶.̶h̶ a̶u̶s̶s̶i̶,̶ s̶i̶g̶_̶q̶u̶i̶t̶ e̶t̶ s̶i̶g̶_̶i̶n̶t̶ d̶e̶v̶i̶e̶n̶t̶ s̶i̶g̶.̶ d̶e̶ p̶l̶u̶s̶,̶ e̶m̶ d̶e̶s̶s̶o̶u̶s̶ d̶e̶s̶ w̶a̶i̶t̶p̶i̶d̶ y̶ a̶ d̶e̶s̶ i̶f̶,̶ f̶a̶u̶d̶r̶a̶ q̶u̶e̶ j̶e̶ t̶'̶e̶x̶p̶l̶i̶q̶u̶e̶ c̶a̶ p̶e̶u̶t̶ s̶e̶r̶v̶i̶r̶ a̶ a̶v̶o̶i̶r̶ l̶a̶ v̶a̶l̶e̶u̶r̶ d̶e̶ r̶e̶t̶o̶u̶r̶;̶
- _execution -> comme je t'ai dis j'ai ajoute des if en dessous des waitpid et un int wstatus que j'initie a 0;
- _exec_cmd -> ajout de sigquit(1) au debut de la fonction.

-̶ p̶a̶r̶s̶_̶i̶n̶i̶t̶ -̶>̶ l̶6̶7̶,̶ c̶h̶e̶c̶k̶ s̶i̶ l̶i̶n̶e̶ e̶t̶ l̶i̶n̶e̶[̶0̶]̶ s̶o̶n̶t̶ p̶a̶s̶ n̶u̶l̶,̶ j̶'̶a̶i̶ a̶u̶s̶s̶i̶ c̶h̶a̶n̶g̶e̶ d̶e̶s̶ i̶f̶,̶ t̶u̶ p̶e̶u̶x̶ c̶o̶p̶i̶e̶r̶ c̶o̶l̶l̶e̶r̶

||  24/04 || -- alan -fin

!!!!!!!!!!!
N̶E̶W̶ -̶-̶-̶-̶>̶ e̶n̶ g̶r̶o̶s̶,̶ s̶i̶ y̶ a̶ p̶a̶s̶ d̶e̶ c̶m̶d̶ g̶e̶n̶r̶e̶ a̶u̶'̶u̶n̶e̶ r̶e̶d̶i̶r̶e̶c̶t̶,̶ c̶a̶ f̶o̶u̶s̶ l̶a̶ m̶e̶r̶d̶e̶ p̶s̶k̶ t̶u̶ c̶h̶e̶c̶k̶ c̶m̶d̶[̶0̶]̶ a̶l̶o̶r̶s̶ q̶u̶'̶i̶l̶ e̶s̶t̶ p̶a̶s̶ m̶a̶l̶l̶o̶c̶,̶ f̶a̶u̶t̶ g̶e̶r̶e̶r̶ c̶a̶;̶
!!!!!!!!!!!!!

POUR DEBUG, utiliser -fsanitize=address -static-libsan dans le cflag et utiliser le debugger

ERROR :

- <a ne donne pas le bon message d'erreur (osef ?) *{c etait pas bon j essayais de close des fd = -1 mais c est fix}
-  export fonctionne pas de temps en temps *{normalement c est fix}
    export ha = 25

- ls >oui | < oui cat >>oui | < oui wc -l ; pas bon resultat *{apres test en tout genre le resultat semble indetermine et ducoup on a le bon mdr}

- env var pete un plomb quand on met un $



||  24/04  || -- alan

- REDIRECT tout seul est toujours pas fonctionnel, il creer pas la redirection, pas de message d'erreur si elle est pas accessible, et mon core dump qui s'affiche alors que ca devrait pas (d'autres on fait ca pour le core dump donc ca devrait etre bon mais te tracasse pas trop si ca continue alors que ta fix);
{*normalement c est fixed}
- export bug toujours, dans _on_success tu free head, et en suite dans _is_a_buildin tu check si head->next et prev sont nul, mais head est deja free
{*fixed aussi j ai change la facon de faire}
||  24/04 || -- alan -fin

COMMENTAIRE ;

J ai add un historique lisible, si tu fais "history" ca te le disp normalement, si ca marche pas c est que jai fail le path.
J ai modifie bc de fonctions et split le main, faut que je fasse mes retours d erreurs de facon clean, on se mettra d accord pour une fonction qui free tout c est le mieux imo 
normalement j ai corrige pas mal de bug ou de retour d erreur qui ne fonctionnait pas, te prend pas la tete avec la norm je la ferai. J ai cree la global mais elle est pas link.




LEAAAAAAAAKS :

- ls <a
- redirection leak / segfault --> c'est quand y a pas de cmd je crois
- espace plante, peut etre a cause du manque de cmd



COMMENTAIRE 23/04;
j ai change pas mal de chose, je suis entrain de faire le retour d erreurs et la gestion memoire sur la partie exec ce qui devrait regler la masse de pb et de leaks,
quasiment tous les fichiers avec exec_ ont ete touches, je me suis concentre sur le buildin ajf, je ferais la suite demain, ca compile pplus c est normal


COMMENTAIRE 24/04

||  24/04 || -- alan

 mec pour la valeur de retour faut se pencher sur waitpid dans le man la partie sur wstatus;

j'ai change le main pour pouvoir s'occuper des signaux et pas que ca plante dans certains cas.
attention : ./minishell dans minishell fout la merde niveaux signaux.

||  24/04 || -- alan -fin


25/05 :

Pas mal de changement au niveau de la gestion memoire;
les buildin return dans tous les cas et ne s occupe plus de free, s ils ne sont pas dans un fork alors ca return jusqu a toucher les free qui sont a la fin de looper
s ils sont dans un fork, ils appelent la fonction On_success pour free et exit Success.
La fonction on success est une fonction qui prend deux parametres : un ptr sur la structure args et un enum, ALL or PARTIAL.
	Si c est ALL elle free tout et exit on success, si c est PARTIAL, elle free tout sauf le path_cmd de la section (qu elle va cpy et return) ainsi que l env. (execve s occupe du reste)
J ai apporte la modif pour gerer le cas cmd[0] == NULL mais qu il cree quand meme le file si besoin
quelques modifs sur la gestion des pipes pour eviter de close de la merde,
export est fix ainsi que unset,
normalement sauf exit aucun buildin ne leak et le retour d erreur est carre dessus.	

EDIT :
Le Buildin exit est termine, on peut rentrer dans la phase de tests ou normalement il ny a pas de leaks ni de crash

il me reste a ratacher les bons codes erreur a la global et ca sera ok	



A TEST :

env -i ./minishell

ls -l >oui | <Makefile grep "SRCS" >>non | echo '        '$"$HOME"$